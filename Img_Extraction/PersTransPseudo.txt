SUBROUTINE order_points(pts):
    rect ← ZeroArray(4, 2)
    s ← pts.sum(Columns)
    rect[0] ← pts[np.argmin(s)]
    rect[2] ← pts[np.argmax(s)]
    
    RETURN rect
ENDSUBROUTINE

SUBROUTINE four_point_transform(image, pts):
                    ENDFOR
    rect ← order_points(pts)
    (tl, tr, br, bl) ← rect
    widthA ← np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
    widthB ← np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
    maxWidth ← max(STRING_TO_INT(widthA), STRING_TO_INT(widthB))
    heightA ← np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
    heightB ← np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
    maxHeight ← max(STRING_TO_INT(heightA), STRING_TO_INT(heightB))
    dst ← np.array([
        [0, 0],
        [maxWidth - 1, 0],
        [maxWidth - 1, maxHeight - 1],
        [0, maxHeight - 1]], dtype←"float32")
    M ← cv2.getPerspectiveTransform(rect, dst)
                               ENDFOR
    warped ← cv2.warpPerspective(image, M, (maxWidth, maxHeight))
    RETURN warped
